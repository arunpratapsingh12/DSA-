//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//Back-end complete function Template for C++

class Solution {
    
    private:
    // int TopDownsolve(vector<int>&cost, vector<int> &dp ,int n){
    //     //base case
    //     if(n==0){
    //         return cost[0];
    //     }
    //     if(n==1){
    //         return cost[1];
    //     }
        
    //     if(dp[n] != -1){
    //         return dp[n];
    //     }
        
    //     dp[n] = cost[n] + min(solve(cost,dp,n-1),solve(cost,dp,n-2));
    //     return dp[n];
    // }
    
     int solve1BottomUp(vector<int>&cost ,int n){
        vector<int> dp(n+1);
        dp[0] = cost[0];
        dp[1] = cost[1];
        
        for(int i=2;i<=n;i++){
            dp[i] = cost[i] + min(dp[i-1],dp[i-2]);
        }
        
        return min(dp[n-1],dp[n-2]);
    }
    
  public:
    int minCostClimbingStairs(vector<int>&cost ,int N) {
        
        //dp topdown approach
        
        // vector<int> dp(N+1,-1);
        // int ans = min(TopDownsolve(cost,dp,N-1),TopDownsolve(cost,dp,N-2));
        // return ans;
        
        //dp bottomup approach
        
        return solve1BottomUp(cost,N);
        
        
        //3-> space optimization in bottom up use prev1 and prev2
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N;
        
        cin>>N;
        vector<int>cost(N);
        
        for(int i=0 ; i<N ; i++){
            cin>>cost[i];
        }

        Solution ob;
        cout<<ob.minCostClimbingStairs(cost,N);
        cout<<"\n";
    }
    return 0;
}
// } Driver Code Ends