#include<iostream>
using namespace std;


class KNqueue
{
public:
    int n;
    int k;
    int* arr;
     int* next;
    int* Front;
    int* rear;
    int freespot;

    KNqueue(int n,int k){

    this->n = n;
    this->k = k;

    Front = new int[k];
    rear = new int[k];

    for(int i=0;i<k;i++){
       Front[i] = -1;
       rear[i] = -1;
    }

    next = new int[n];

    for(int i=0;i<n;i++){
       next[i] = i+1;
    }
    next[n-1] = -1;

    freespot = 0;
     arr = new int[n];



    }

    void push(int data,int qn){

    //check overflow

    if(freespot == -1){
        cout<<"!Not availale space for push element"<<endl;
        return;
    }

    // find index where i store the element in arr

    int index = freespot;

    //update freespot;;

    freespot = next[index];

    //check first element in arr

    if(Front[qn-1] == -1){
        Front[qn-1] = index;
    }else{

        next[rear[qn-1]] = index;


    }

    next[index] = -1;
    //point rear to index
    rear[qn-1] = index;

    arr[index] = data;


    }

    int pop(int qn){

    if(Front[qn-1] == -1){


        cout<<"underflow"<<endl;
        return -1;
    }

    // index find

    int index = Front[qn-1];
    Front[qn-1] = next[index];


    // map to the next freespot

    next[index] = freespot;
    freespot = index;

    return arr[index];



    }





};





int main()
{
    KNqueue q(7,3);
    q.push(1,1);
    q.push(2,1);
    q.push(3,2);

    cout<< q.pop(1)<<endl;
     cout<< q.pop(2)<<endl;
          cout<< q.pop(1)<<endl;
          cout<< q.pop(1)<<endl;


    return 0;
}
