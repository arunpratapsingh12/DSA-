//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution{
    public:
    
       bool issafe(int newx, int newy, int n, vector<vector<int>>& arr, vector<vector<int>> visited) {
        if (newx >= 0 && newx < n && newy >= 0 && newy < n && arr[newx][newy] == 1 && visited[newx][newy] == 0) {
            return true;
        }
        return false;
    }
      void solve(int x, int y, int n, vector<string>& ans, vector<vector<int>> visited, string path, vector<vector<int>>& arr) {
        // Base case
          //base case
          if(x == n-1 && y == n-1){
              ans.push_back(path);
              return;
          }
          
          
          //D L R U
          //down
          visited[x][y] = 1;
          
          if(issafe(x+1,y,n,arr,visited)){
             solve(x-1,y,n,ans,visited,path+'D',arr);

          }
          
          //left
          if(issafe(x,y-1,n,arr,visited)){
              solve(x,y-1,n,ans,visited,path+'L',arr);
          }
          
          //right
          if(issafe(x,y+1,n,arr,visited)){
              solve(x,y+1,n,ans,visited,path+'R',arr);
          }
          
          //up
          if(issafe(x-1,y,n,arr,visited)){
              solve(x-1,y,n,ans,visited,path+'U',arr);

          }
          
          visited[x][y] = 0;
      }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
       vector<string> ans;
       vector<vector<int>> visited(n,vector<int>(n,0));
       string path = "";
       if(m[0][0] == 0){
           return ans;
       }
       
       solve(0,0,n,ans,visited,path,m);
       return ans;
       
    }
};

    


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends