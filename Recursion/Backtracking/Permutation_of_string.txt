//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
     private:
     bool checkunique(vector<string>& ans,string s){
         if(ans.size() == 0){
             return true;
         }
         
         for(int i=0;i<ans.size();i++){
             if(ans[i] == s){
                 return false;
             }
         }
         
         return true;
         
         
     }
    private:
    void solve(string s,vector<string>& ans,int i){
        //base case 
        if(i >= s.size()){
                
            if(checkunique(ans,s)){
                ans.push_back(s);
            }
            
            return;
        }
        
        for(int j=i;j<s.size();j++){
            swap(s[i],s[j]);
            
            //recursion
            solve(s,ans,i+1);
            
            //backtrack
               swap(s[i],s[j]);
        }
    }
	public:
		vector<string>find_permutation(string S)
		{
		    vector<string> ans;
		    int index = 0;
		    solve(S,ans,index);
		    return ans;
		}
};



//{ Driver Code Starts.
int main(){
    int t;
    cin >> t;
    while(t--)
    {
	    string S;
	    cin >> S;
	    Solution ob;
	    vector<string> ans = ob.find_permutation(S);
	    sort(ans.begin(),ans.end());
	    for(auto i: ans)
	    {
	    	cout<<i<<" ";
	    }
	    cout<<"\n";
    }
	return 0;
}

// } Driver Code Ends