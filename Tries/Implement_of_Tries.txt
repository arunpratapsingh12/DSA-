#include<bits/stdc++.h>
using namespace std;

class TrieNode{
public:
    char data;
    TrieNode* children[26];
    bool isterminal;

    TrieNode(char ch){
    data = ch;
    for(int i=0;i<26;i++){

        children[i] = NULL;
    }
    isterminal = false;
    }

};


class Trie{

TrieNode* root;
public:
Trie(){
root = new TrieNode('\0');
}

void insertUtil(TrieNode* root,string word){

//base case
if(word.size() == 0){
    root->isterminal = true;
    return;
}

int index = word[0] - 'a';
TrieNode* child;

//chracter is present
if(root->children[index] != NULL){

    child = root->children[index];
}else{
//absent
child = new TrieNode(word[0]);
root->children[index] = child;
}

//recursion
insertUtil(child,word.substr(1));


}

void insertstr(string word){
insertUtil(root,word);
}

bool searchutil(TrieNode* root,string word){
//base case
if(word.size() == 0){
    return root->isterminal;
}

int index = word[0] - 'a';
TrieNode *child;

if(root->children[index] != NULL){
    child = root->children[index];

}else{

return false;
}

searchutil(child,word.substr(1));

}

bool searchstr(string word){
searchutil(root,word);
}


};
int main(){
Trie *t = new Trie();


t->insertstr("arun");
//
cout<<"searching"<<t->searchstr("arun")<<endl;
//bool searching = t->searchstr("arun");
//if(searching){
//    cout<<"present"<<endl;
//}else{
// cout<<"not present"<<endl;
//}

return 0;
}
