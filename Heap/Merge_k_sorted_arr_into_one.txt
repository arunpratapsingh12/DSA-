//{ Driver Code Starts
//Initial Template for C++

#include<bits/stdc++.h>
#define N 105
using namespace std;
void printArray(vector<int> arr, int size)
{
for (int i=0; i < size; i++)
	cout << arr[i] << " ";
}


// } Driver Code Ends
//User function Template for C++

class node{
    public:
    int data;
    int i;
    int j;
    node(int data,int row,int col){
        this->data= data;
        i=row;
        j=col;
    }
};

class compare{
    public:
  bool operator()(node* a, node* b){
        return a->data > b->data;
    }
};
class Solution




{
    public:
    //Function to merge k sorted arrays.
    vector<int> mergeKArrays(vector<vector<int>> arr, int K)
    {
       /////************Approach 1*****************
       
    //   vector<int> ans;
    //   for(int i=0;i<arr.size();i++){
    //       for(int j=0;j<arr[0].size();j++){
    //           ans.push_back(arr[i][j]);
    //       }
    //   }
    //      sort(ans.begin(),ans.end());
    //      return ans;
    
    
    
     /////************Approach 2***************** Not working this apporach
     
    //  priority_queue<node*,vector<node*>,compare> minHeap;
     
    //  for(int i=0;i<K;i++){
    //      node* temp = new node(arr[i][0],i,0);
    //      minHeap(temp);
    //  }
     
    //  vector<int> ans;
    //  while(minHeap.size() > 0){
    //      node tmp = minHeap.top();
    //      ans.push_back(tmp->data);
    //      minHeap.pop();
         
    //      int i = tmp->i;
    //      int j = tmp->j;
         
    //      if(j+1 < arr[i].size()){
    //          node* next = new node(arr[i][j+1],i,j+1);
    //          minHeap.push(next);
    //      }
    //  }
     
    //  return ans;
    
    
    
     /////************Approach 3 similar to 2nd***************** Not working this apporach
     
     vector<int>ans; 
    priority_queue<int,vector<int>,greater<int>>pq;//min heap
    for(int i=0;i<K;i++)
    {
        for(int j=0;j<arr[i].size();j++)
          pq.push(arr[i][j]);
    }
    while(!pq.empty())
    {
        ans.push_back(pq.top());
        pq.pop();
    }
    return ans;
     
    }
};

//{ Driver Code Starts.

int main()
{
	int t;
	cin>>t;
	while(t--){
	    int k;
	    cin>>k;
	    vector<vector<int>> arr(k, vector<int> (k, 0));
	    for(int i=0; i<k; i++){
	        for(int j=0; j<k; j++)
	        {
	            cin>>arr[i][j];
	        }
	    }
	    Solution obj;
    	vector<int> output = obj.mergeKArrays(arr, k);
    	printArray(output, k*k);
    	cout<<endl;
    }
	return 0;
}






// } Driver Code Ends