//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
  
  bool detectcycle(int node, unordered_map<int,bool> &visited, unordered_map<int,bool> &dfsvisited, vector<int> adj[])
  {
      visited[node] = 1;
      dfsvisited[node] = 1;
      
      for(auto neighbour : adj[node]){
          if(!visited[neighbour]){
              bool iscycle = detectcycle(neighbour,visited,dfsvisited,adj);
              if(iscycle){
                  return 1;
              }
          }
        //   else if(visited[neighbour] == true && dfsvisited[neighbour] == true){
        else if(dfsvisited[neighbour] == 1){
              return 1;
          }
      }
      //backtracking
      dfsvisited[node] = 0;
      return 0;
  }
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        unordered_map<int,bool> visited;
        unordered_map<int,bool> dfsvisited;
        
        for(int i=0;i<V;i++){
            if(!visited[i]){
                bool ans = detectcycle(i,visited,dfsvisited,adj);
                if(ans == true){
                    return true;
                }
            }
        }
        
        return false;
    }
};

//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}

// } Driver Code Ends