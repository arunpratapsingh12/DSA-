//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
  
  bool cycledetection(int src, unordered_map<int,bool> visited,vector<int> adj[])
  {
       unordered_map<int,int> parents;
       visited[src] = true;
       parents[src] = -1;
       queue<int> q;
       q.push(src);
       
       while(!q.empty()){
           int front = q.front();
           q.pop();
           
           for(auto neighbour : adj[front]){
               if(visited[neighbour] == true && parents[front] != neighbour){
                   return true;
               }else if(!visited[neighbour]){
                   q.push(neighbour);
                   visited[neighbour] = true;
                   parents[neighbour] = front;
               }
           }
       }
       
       return false;
  }
  
  
  bool cycledetectiondfs(int src, unordered_map<int,bool> visited,vector<int> adj[],int parent){
      visited[src] = true;
      
      for(auto neighbour : adj[src]){
          if(!visited[neighbour]){
              bool cycledected = cycledetectiondfs(neighbour,visited,adj,src);
              if(cycledected) return true;
          }else if(neighbour != parent){
              return true;
          }
      }
      
      return false;
  }
  
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        
        unordered_map<int,bool> visited;
        //for all components
        for(int i=0;i<V;i++)
        {
            //// using bfs
            
            // bool ans = cycledetection(i,visited,adj);
            
            ////using dfs
            
             bool ans = cycledetectiondfs(i,visited,adj,-1);
            if(ans == true){
                return 1;
            }
        }
        
        return 0;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}
// } Driver Code Ends