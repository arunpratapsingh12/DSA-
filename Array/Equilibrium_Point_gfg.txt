//{ Driver Code Starts
#include <iostream>
using namespace std;


// } Driver Code Ends
class Solution{
    public:
    // Function to find equilibrium point in the array.
    // a: input array
    // n: size of array
    int equilibriumPoint(long long a[], int n) {
        // int left = 0;
        // int right = n-1;
        //  int leftsum = 0;
        // int rightsum = 0;
    
        
        //     while(left < right)
        //     {
        //         if(leftsum == rightsum){
        //             leftsum += a[left];
        //             rightsum += a[right];
        //             left++;
        //             right--;
        //         }else if(leftsum < rightsum){
                    
        //               leftsum += a[left];
        //             left++;
                    
        //         }else if(leftsum > rightsum){
 
        //             rightsum += a[right];
        //             right--;
        //         }
        //     }
            
        //     if(leftsum != rightsum){
        //         return -1;
        //     }
            
        //     return left+1;
        
        //2->
        
        
        int sumofarr=0;
        int leftsum = 0;
        for(int i=0;i<n;i++){
            sumofarr += a[i];
        }
        
        for(int i=0;i<n;i++){
            sumofarr -= a[i];
            if(sumofarr == leftsum) return i +1;
            leftsum += a[i];
           
        }
        
        return -1;
 
    }

};

//{ Driver Code Starts.


int main() {

    long long t;
    
    //taking testcases
    cin >> t;

    while (t--) {
        long long n;
        
        //taking input n
        cin >> n;
        long long a[n];

        //adding elements to the array
        for (long long i = 0; i < n; i++) {
            cin >> a[i];
        }
        
        Solution ob;

        //calling equilibriumPoint() function
        cout << ob.equilibriumPoint(a, n) << endl;
    }
    return 0;
}

// } Driver Code Ends